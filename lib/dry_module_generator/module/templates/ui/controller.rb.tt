<%
  controller_name = "#{class_name.pluralize}Controller"
  service_name = "#{class_name.singularize.downcase}_service"
  read_service_name = "#{class_name.singularize.downcase}_read_service"
  pluralized_variable_name = class_name.pluralize.downcase
  singularize_variable_name = class_name.singularize.downcase
  view_path_name = class_name.pluralize.downcase
%>module <%= module_name.capitalize %>
  module Ui
    class <%= controller_name %> < ApplicationController
      include Import.inject[
        <%= service_name %>: "<%= module_name %>.<%= service_name %>",
        <%= read_service_name %>: "<%= module_name %>.<%= read_service_name %>"
      ]

      def index
        @paginated_result = <%= read_service_name %>.get_all_<%= pluralized_variable_name %>(
          ::ListQuery.new(
            page: params[:page] || 1,
            page_size: params[:page_size] || 10,
            q: params[:q] || {}
          )
        )

        render json: @paginated_result if request.format.json?
      end

      def new
        @form = Create<%= class_name.singularize %>Validator.new
      end

      def create
        id = <%= service_name %>.create_<%= singularize_variable_name %>(
          validator.validate(
            <%= singularize_variable_name %>_params,
            Create<%= class_name.singularize %>Validator.new,
            { id: SecureRandom.uuid }
          )
        )
        render json: { id: id }, status: 201 and return if request.format.json?
        redirect_to <%= view_path_name %>_path, notice: "<%= class_name %> was successfully created!"
      rescue ConstraintError => e
        @form = e.validator
        render json: @form.errors, status: :unprocessable_entity and return if request.format.json?
        render :new, status: :unprocessable_entity
      end

      def show
        @<%= singularize_variable_name %> = <%= read_service_name %>.get_<%= singularize_variable_name %>(params[:id])
        render json: @<%= singularize_variable_name %> if request.format.json?
      end

      def edit
        @<%= singularize_variable_name %> = <%= read_service_name %>.get_<%= singularize_variable_name %>(params[:id])
        @form = Update<%= class_name.singularize %>Validator.new(params: { <% options[:attributes].each do |field_name, value| %><%= field_name %>: @<%= singularize_variable_name %>.<%= field_name %>, <% end %> })
      end

      def update
        <%= service_name %>.update_<%= singularize_variable_name %>(validator.validate(<%= singularize_variable_name %>_params, Update<%= class_name.singularize %>Validator.new, { id: params[:id] }))
        render json: {} and return if request.format.json?
        redirect_to <%= view_path_name %>_path(page: params[:page], q: params[:q].as_json), notice: "<%= class_name %> was successfully updated!"
      rescue ConstraintError => e
        @form = e.validator
        render json: @form.errors, status: :unprocessable_entity and return if request.format.json?
        render :edit, status: :unprocessable_entity
      end

      def destroy
        <%= service_name %>.delete_<%= singularize_variable_name %>(params[:id])
        respond_to do |format|
          format.json { render json: {} }
          format.html { redirect_to <%= view_path_name %>_path(page: params[:page], q: params[:q].as_json), notice: "<%= class_name %> was successfully deleted!" }
          format.turbo_stream { render turbo_stream: turbo_stream.remove(params[:id]) }
        end
      end

      private

      def <%= singularize_variable_name %>_params
        params.require(:<%= singularize_variable_name %>).to_unsafe_h
      end
    end
  end
end